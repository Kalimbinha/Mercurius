Metadata-Version: 2.4
Name: mercurius-fastcrud
Version: 0.1.0
Summary: FastCRUD helper to auto-generate FastAPI CRUD routes from SQLAlchemy models
Author-email: Your Name <you@example.com>
License: MIT
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: fastapi
Requires-Dist: sqlalchemy
Requires-Dist: pydantic

# Mercurius

Esta pasta contém utilitários para acelerar desenvolvimento com FastAPI + SQLAlchemy.

## Mercurius

`Mercurius` gera endpoints CRUD automaticamente a partir de um modelo SQLAlchemy e schemas Pydantic.

Principais features:
- Geração automática de rotas: list, get, create, update, delete
- Suporte a schemas separados (read/create/update)
- Paginação (skip/limit), filtragem simples (`filters` como `field:value`) e ordenação (sort_by, sort_dir)
- Injeção de dependências por operação (ex.: autenticação por rota)

Exemplo mínimo:

```python
from fastapi import FastAPI
from src.crud import Mercurius

app = FastAPI()

# supondo: Model (SQLAlchemy), ItemRead (Pydantic), get_db dependency
Mercurius(app, Model, ItemRead, get_db, create_schema=ItemCreate, update_schema=ItemUpdate)
```

Protegendo apenas a criação com uma dependência de autenticação:

```python
def require_auth(user=Depends(get_current_user)):
	return user

Mercurius(
	app,
	Model,
	ItemRead,
	get_db,
	create_schema=ItemCreate,
	operation_dependencies={"create": [require_auth]}
)
```

Query params suportados na listagem:

- skip: int (offset)
- limit: int
- sort_by: nome do campo
- sort_dir: `asc` ou `desc`
- filters: múltiplos parâmetros `filters=field:value` (por exemplo `?filters=name:john&filters=age:30`)

Testes: rode `pytest` na raiz do projeto para executar `tests/test_crud.py`.

Notas:
- Os schemas Pydantic devem ter `orm_mode = True` no `Config` para responses que venham dos objetos ORM.
- Para esquemas `create`/`update` você pode passar modelos separados ou reutilizar o `read_schema`.
